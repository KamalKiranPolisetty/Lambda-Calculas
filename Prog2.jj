/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Prog2.jj */
/*@egen*//**
 *
 * Copyright (c) 1996-1997 Sun Microsystems, Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.
 *
 */

options {
              // an option for JJTree
              // set to build a multi mode tree
              // (with different types of nodes)
  LOOKAHEAD=2;
  FORCE_LA_CHECK=true;
}

PARSER_BEGIN(Prog2)
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

class Prog2/*@bgen(jjtree)*/implements Prog2TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTProg2State jjtree = new JJTProg2State();

/*@egen*/
  public static void main(String args[]) {
    System.out.println(">>> Lambda Expression Evaluator <<<");
    System.out.println("Enter an applied Lambda expression:");
    Prog2 t = new Prog2(System.in);
    try {
      ASTStart n = t.Start();
      n.dump("");
      System.out.println();
      System.out.println("The Lambda expression in the concrete syntax:");
      System.out.println(n.astToString());
      System.out.println();
      System.out.println("The abstract syntax tree with free variables:");
      n.dumpFV("");
      Set<String> freeVariables = n.FV();
      System.out.println();
      System.out.println("Enter an applied Lambda expression:");
      t.ReInit(System.in);
      n = t.Start();
      System.out.println();
      System.out.println("The abstract syntax tree:");
      n.dump("");
      System.out.println();
      System.out.println("Enter the variable to be substituted:");
      Scanner scanner = new Scanner(System.in);
      String var = scanner.nextLine();
      System.out.println();
      System.out.println("Enter the substituting applied Lambda expression:");
      t.ReInit(System.in);
      SimpleNode subExpr = t.Start();
      System.out.println();
      System.out.println("The abstract syntax tree:");
      subExpr.dump("");
      System.out.println();
      SimpleNode substituted = n.substitute(var, subExpr);
      System.out.println("The substitution result:");
      substituted.dump("");
      System.out.println();
      System.out.println("Enter an applied Lambda expression:");
      t.ReInit(System.in);
      SimpleNode NOE = t.Start();
      System.out.println();
      SimpleNode startNode = (SimpleNode) NOE.jjtGetChild(0);
      SimpleNode result = startNode.cloneTree();
      result = result.normalOrderEvaluate();
      System.out.println("The normal order evaluation result:");
      result.dump("");
      System.out.println();
      
    } catch (Exception e) {
      System.out.println("Error has occured please check below trace error");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Prog2)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN: /*LAMBDA*/
{
	<LAMBDA: "L">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}



ASTStart Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



void Expression()       : {}
{
  (
    MyID() |/*@bgen(jjtree) add */
             {
               ASTadd jjtn001 = new ASTadd(JJTADD);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ "+"/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/      |/*@bgen(jjtree) sub */
                        {
                          ASTsub jjtn002 = new ASTsub(JJTSUB);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/ "-"/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/      |/*@bgen(jjtree) mul */
                                   {
                                     ASTmul jjtn003 = new ASTmul(JJTMUL);
                                     boolean jjtc003 = true;
                                     jjtree.openNodeScope(jjtn003);
                                   }
                                   try {
/*@egen*/ "*"/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc003) {
                                       jjtree.closeNodeScope(jjtn003, true);
                                     }
                                   }
/*@egen*/      |/*@bgen(jjtree) div */
                                              {
                                                ASTdiv jjtn004 = new ASTdiv(JJTDIV);
                                                boolean jjtc004 = true;
                                                jjtree.openNodeScope(jjtn004);
                                              }
                                              try {
/*@egen*/ "/"/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc004) {
                                                  jjtree.closeNodeScope(jjtn004, true);
                                                }
                                              }
/*@egen*/     
    |Integer() 
    |"(" ("L" MyID()/*@bgen(jjtree) #lamb( 2) */
                     {
                       ASTlamb jjtn005 = new ASTlamb(JJTLAMB);
                       boolean jjtc005 = true;
                       jjtree.openNodeScope(jjtn005);
                     }
                     try {
/*@egen*/ ExpressionBody()/*@bgen(jjtree)*/
                     } catch (Throwable jjte005) {
                       if (jjtc005) {
                         jjtree.clearNodeScope(jjtn005);
                         jjtc005 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte005 instanceof RuntimeException) {
                         throw (RuntimeException)jjte005;
                       }
                       if (jjte005 instanceof ParseException) {
                         throw (ParseException)jjte005;
                       }
                       throw (Error)jjte005;
                     } finally {
                       if (jjtc005) {
                         jjtree.closeNodeScope(jjtn005,  2);
                       }
                     }
/*@egen*/         )")"
    |"(" Expression() (/*@bgen(jjtree) #appl( 2) */
                       {
                         ASTappl jjtn006 = new ASTappl(JJTAPPL);
                         boolean jjtc006 = true;
                         jjtree.openNodeScope(jjtn006);
                       }
                       try {
/*@egen*/Expression()/*@bgen(jjtree)*/
                       } catch (Throwable jjte006) {
                         if (jjtc006) {
                           jjtree.clearNodeScope(jjtn006);
                           jjtc006 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte006 instanceof RuntimeException) {
                           throw (RuntimeException)jjte006;
                         }
                         if (jjte006 instanceof ParseException) {
                           throw (ParseException)jjte006;
                         }
                         throw (Error)jjte006;
                       } finally {
                         if (jjtc006) {
                           jjtree.closeNodeScope(jjtn006,  2);
                         }
                       }
/*@egen*/         )* ")"
  )  
   
}

void ExpressionBody()       : {} 
{
  (
    "." Expression() (/*@bgen(jjtree) #appl( 2) */
                      {
                        ASTappl jjtn001 = new ASTappl(JJTAPPL);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/Expression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/         )*
    |MyID()/*@bgen(jjtree) #lamb( 2) */
            {
              ASTlamb jjtn002 = new ASTlamb(JJTLAMB);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ ExpressionBody()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
              }
            }
/*@egen*/         
 )
}

void MyID() :
{/*@bgen(jjtree) MyID */
  ASTMyID jjtn000 = new ASTMyID(JJTMYID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) MyID */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Integer() : 
{/*@bgen(jjtree) Integer */
 ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
	jjtn000.setValue(t.image);
}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}